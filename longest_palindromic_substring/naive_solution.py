# This naive solution passes 100 of 103 tests on leetcode: https://leetcode.com/problems/longest-palindromic-substring/ and https://leetcode.com/submissions/detail/391538160/
# It exceeds the time restraints on this following example:


def is_palindrome(s):
 return(s == s[::-1])

def all_substrings(s):
 return([s[i: j] for i in range(len(s)) for j in range(i + 1, len(s) + 1)])

def all_substring_palindromes(s):
 pal = []
 for i in all_substrings(s):
  if len(i) < 3:
   continue
  if is_palindrome(i):
   pal.append(i)
 return(pal)

print(max(all_substring_palindromes("bababd"), key = len))